 长沙 长沙市芙蓉中路１８９号（省建行办公楼旁）--长沙宏达科技发展公司

汇智众通（深圳）科技文化产业有限公司

1. IBM 的DB2
  作为关系数据库领域的开拓者和领航人，IBM在1997年完成了System R系统的原型，1980年开始提供集成的数据库服务器―― System/38，随后是SQL/DSforVSE和VM，其初始版本与SystemR研究原型密切相关。DB2 forMVSV1 在1983年推出。该版本的目标是提供这一新方案所承诺的简单性，数据不相关性和用户生产率。1988年DB2 for MVS 提供了强大的在线事务处理（OLTP）支持，1989 年和1993 年分别以远程工作单元和分布式工作单元实现了分布式数据库支持。最近推出的DB2 Universal Database 6.1则是通用数据库的典范，是第一个具备网上功能的多媒体关系数据库管理系统，支持包括Linux在内的一系列平台。 

  2. Oracle

  Oracle 前身叫SDL，由Larry Ellison 和另两个编程人员在1977创办，他们开发了自己的拳头产品，在市场上大量销售，1979 年，Oracle公司引入了第一个商用SQL 关系数据库管理系统。Oracle公司是最早开发关系数据库的厂商之一，其产品支持最广泛的操作系统平台。目前Oracle关系数据库产品的市场占有率名列前茅。

  3. Informix

  Informix在1980年成立，目的是为Unix等开放操作系统提供专业的关系型数据库产品。公司的名称Informix便是取自Information 和Unix的结合。Informix第一个真正支持SQL语言的关系数据库产品是Informix SE（StandardEngine）。InformixSE是在当时的微机Unix环境下主要的数据库产品。它也是第一个被移植到Linux上的商业数据库产品。

  4. Sybase

  Sybase公司成立于1984年，公司名称“Sybase”取自“system”和 “database” 相结合的含义。Sybase公司的创始人之一Bob Epstein 是Ingres 大学版（与System/R同时期的关系数据库模型产品）的主要设计人员。公司的第一个关系数据库产品是1987年5月推出的Sybase SQLServer1.0。Sybase首先提出Client/Server 数据库体系结构的思想，并率先在Sybase SQLServer 中实现。

  5. SQL Server

  1987 年，微软和 IBM合作开发完成OS/2，IBM 在其销售的OS/2 ExtendedEdition 系统中绑定了OS/2Database Manager，而微软产品线中尚缺少数据库产品。为此，微软将目光投向Sybase，同Sybase 签订了合作协议，使用Sybase的技术开发基于OS/2平台的关系型数据库。1989年，微软发布了SQL Server 1.0 版。

  6. PostgreSQL

  PostgreSQL 是一种特性非常齐全的自由软件的对象――关系性数据库管理系统（ORDBMS），它的很多特性是当今许多商业数据库的前身。PostgreSQL最早开始于BSD的Ingres项目。PostgreSQL 的特性覆盖了SQL-2/SQL-92和SQL-3。首先，它包括了可以说是目前世界上最丰富的数据类型的支持；其次，目前PostgreSQL 是唯一支持事务、子查询、多版本并行控制系统、数据完整性检查等特性的唯一的一种自由软件的数据库管理系统.

  7.mySQL

  mySQL是一个小型关系型数据库管理系统，开发者为瑞典MySQL AB公司。在2008年1月16号被Sun公司收购。目前MySQL被广泛地应用在Internet上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了MySQL作为网站数据库。


PostgreSQL数据库
PostgreSQL是以加州大学伯克利分校计算机系开发的 POSTGRES，现在已经更名为PostgreSQL，它的特性非常齐全，对象软件非常自由，包括了目前世界上最丰富的数据类型的支持。

ACCESS

MongoDB



（1）读者信息管理：能够对读者的基本信息进行管理，包括新增读者，如学校新来一名教师，想要借书，就必须先添加读者信息；读者信息的修改，如学生转到别的专业，此时要修改学生的基本信息；删除读者的信息，比如某个学生中途退学了，可以将其信息删除。查询读者的信息，比如有同学拾到了一张借阅卡，卡上有学生的编号，通过此号来查询学生的联系电话，从而可以找到学生。

（2）图书信息管理：能够对图书的基本信息进行管理，包括新增图书，学校每年会购进新书，此时需要将新书的信息录入系统中；图书信息的修改，如学生借书后将图书丢失，此时需要修改图书的总数量，使总数减1；删除图书，学校在购进新书的同时，每年会对过期的图书进行清理，不再提供借阅，此时就需要将这些图书的信息从系统中删除。查询图书的信息，比如要查看有哪些是Java相关的书籍或者指定ISBN号的图书等。

（3）图书借阅信息管理：能够对图书的借阅信息进行记录，包括读者信息、图书信息、借阅时间等信息。

（4）图书归还信息管理：能够对图书的借阅信息进行记录，包括读者信息、图书信息、归还时间、是否超期、罚金等信息。

（5）系统用户信息管理：能够对系统用户的信息进行管理，包括增加新的系统操作用户，对当前系统用户的密码进行修改，以及删除某一用户。

根据上述功能需求，本系统具体的功能模块图如下图所示：


本系统功能分为读者信息管理模块、图书信息管理模块、图书借阅管理模块、基础信息维护模块和用户管理模块。

（1）读者信息管理：包括读者信息添加和读者信息查询与修改功能。用户登录成功之后，可以浏览所有读者的信息，也可以检索特定读者的信息；同时，可以对读者信息进行维护，包括增加、删除及修改。具体信息包括读者类型、读者姓名、出生日期、性别、电话、所在院系、注册日期等。

（2）图书信息管理：包括图书信息添加和图书信息查询与修改功能。用户登录成功之后，可以浏览所有图书信息和检索特定图书的信息；也可以对图书信息进行维护。包括添加图书、删除图书以及修改图书信息。具体信息包括：图书ISBN、图书名称、作者、出版社、出版日期、印刷次数、单价、图书类别等。

（3）图书借阅管理：包括图书借阅和图书归还功能。图书借阅功能，先输入读者的编号，然后输入要借阅的图书的信息，记录系统当前时间即借阅时间；图书归还功能，输入读者的编号，选择其名下已借阅的图书，判断当前日期即归还日期与借阅日期的差值是否超过了规定的期限，计算罚金，从而进行图书的归还操作。具体信息包括：借阅日期、归还日期、罚金。由于要计算罚金，故需要知道该读者的读者类型，根据类型判断其可借图书天数、可借图书数量等。

（4）基础信息维护：包括图书类别设置、读者类别设置及罚金设置。图书类别设置，可以对图书的类别进行增加、删除、修改和查询；读者类别设置可以对读者的类别进行增加、删除、修改和查询；罚金设置，可以指定超期一天的罚金标准。

（5）用户管理：包括修改密码、用户添加和删除。修改密码，是指当前用户修改自己的密码；用户添加和删除，是对新增和去除系统用户时对用户信息的维护。




1.什么是ssh?

SSH对应 struts spring hibernate

struts 采用MVC模式，主要是作用于用户交互

spring 采用IOC和AOP~作用比较抽象，是用于项目的松耦合

hibernate 是对象持久化框架，其实就是实体类和数据库表建立关系，操作类就会触发相应的sql语句，可以不用写任何sql语句，完成数据库编程

SSH就是Struts + Spring + Hibernate 3个Java框架的集合，现在Java开发中常用的框架组合。用来开发后台，与前台和数据库进行数据交互。

2.什么是Struts2

Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品。虽然从Struts 1到Struts 2有着太大的变化，但是相对于WebWork，Struts 2的变化很小

设计目标

Struts设计的第一目标就是使MVC模式应用于web程序设计。在这儿MVC模式的好处就不在提了。

技术优势

Struts2有两方面的技术优势，一是所有的Struts2应用程序都是基于client/server HTTP交换协议，The Java Servlet API揭示了Java Servlet只是Java API的一个很小子集，这样我们可以在业务逻辑部分使用功能强大的Java语言进行程序设计。

二是提供了对MVC的一个清晰的实现，这一实现包含了很多参与对所以请求进行处理的关键组件，如：拦截器、OGNL表达式语言、堆栈。

 

因为struts2有这样目标，并且有这样的优势，所以，这是我们学习struts2的理由，下面，我们在深入剖析一下struts的工作原理。

 

 

struts2的优/缺点：
优点：
这里有一些强大的功能，可能会迫使你考虑Struts2：

POJO表单和POJO动作 - Struts2的Struts框架已经摆脱了动作表单组成部分， Struts2可以使用任何POJO接收的形式输入。同样现在可以看到任何POJO作为一个Action类。
标签支持 - Struts2中，提高了表单标签和新标签允许开发人员编写更少的代码。
AJAX 支持- Struts2中已确认由Web2.0技术接管，并整合到产品中，通过创建AJAX标签，功能非常相似的标准Struts2 标签AJAX支持。
易于整合 - Struts2 集成各种整合与其他框架如Spring，Tiles 和SiteMesh是现在更容易。
模板支持 - 支持生成使用模板。
插件支持 - 可以提高核心Struts2的特性，并增强使用插件。大量的插件可供Struts2。
性能分析 - Struts2的分析，调试和分析应用程序提供了集成。除此之外，Struts还提供了集成的内置调试工具调试。
易于修改标签 - Struts2的标签标注，可以调整使用Freemarker的模板。这并不需要JSP或Java知识。基本HMTL，XML和CSS知识是足够修改标签。
提倡少配置 - Struts2 促进较少的配置的帮助下，使用默认的各种设置值。不必配置的东西，除非它不符Struts2的默认设置。
视图技术: - Struts2中有一个很大的支持多个视图选项 (JSP, Freemarker, Velocity 和 XSLT)
以上只是Struts2的十大功能，这使得它是企业公司级应用框架。

缺点：
虽然Struts 2 的配备了一个伟大的功能列表，但我不会忘记提及关于Struts2一些缺点，将需要大量的改进措施：

更大的学习曲线 - 要使用MVC与Struts，你必须是习惯使用标准的JSP，Servlet API和大量精心设计的框架。
欠佳的文档 - Struts有标准的servlet和JSP API的相比，更少的在线资源，许多用户第一时间发现网上Apache文档混乱和管理不善的组织。
较少透明度 - Struts应用程序中，有很多幕后比正常的基于Java的Web应用程序，这使得它很难理解的框架。
最后一点，一个好的框架应该提供通用的特性，许多不同类型的应用程序，可以利用它。 Struts 2是一个最好的网络架构和高度被用于开发富Internet应用程序（RIA）。

 

3.什么是Spring？

Spring是一个轻量级的DI和AOP容器框架。

说它轻量级有一大部分原因是相对与EJB的（虽然本人从没有接触过EJB的应用），重要的是，Spring是非侵入式的，基于spring开发的应用一般不依赖于spring的类。

 

DI：称作依赖注入(Dependency Injection),和控制反转一个概念，具体的讲，当一个角色需要另外一个角色协助的时候，在传统的程序设计中，通常有调用者来创建被调用者的实例。但是在spring中创建被调用者将不再有调用者完成，因此叫控制反转。创建被调用对象有Spring来完成，在容器实例化对象的时候主动的将被调用者（或者说它的依赖对象）注入给调用对象，因此又叫依赖注入。

AOP：Spring对面向切面编程提供了强有力的支持，通过它让我们将业务逻辑从应用服务（如事务管理）中分离出来，实现了高内聚开发，应用对象只关注业务逻辑，不再负责其它系统问题（如日志、事务等）。Spring支持用户自定义切面。

面向切面编程是面向对象编程的有力补充。面向对象编程将程序分成各个层次的对象，面向切面的程序将运行过程分解成各个切面。AOP是从运行程序的角度去考虑程序的结构，提取业务处理过程的切面，OOP是静态的抽象，AOP是动态的抽象，是对应用执行过程的步骤进行抽象，从而获得步骤之间的逻辑划分。

容器：Spring是个容器，因为它包含并且管理应用对象的生命周期和配置。如对象的创建、销毁、回调等。

框架：Spring作为一个框架，提供了一些基础功能，（如事务管理，持久层集成等），使开发人员更专注于开发应用逻辑。

 

Spring的优/缺点：
优点：

1.使用Spring的IOC容器，将对象之间的依赖关系交给Spring，降低组件之间的耦合性，让我们更专注于应用逻辑

2.可以提供众多服务，事务管理，WS等。

3.AOP的很好支持，方便面向切面编程。

4.对主流的框架提供了很好的集成支持，如Hibernate,Struts2,JPA等

5.Spring DI机制降低了业务对象替换的复杂性。

6.Spring属于低侵入，代码污染极低。

7.Spring的高度可开放性，并不强制依赖于Spring，开发者可以自由选择Spring部分或全部

缺点：

1.项目有时会抽风，无缘无故的报错，而且报的错也很神奇

 

4.什么是hibernate？

Hibernate，翻译过来是冬眠的意思，正好现在已经进入秋季，世间万物开始准备冬眠了。其实对于对象来说就是持久化。

 



      持久化（Persistence），即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在关系型的数据库中，当然也可以存储在磁盘文件中、XML数据文件中等等。

持久化是将程序数据在持久状态和瞬时状态间转换的机制。

JDBC就是一种持久化机制。文件IO也是一种持久化机制。

 

我们从三个角度理解一下Hibernate：

一、Hibernate是对JDBC进一步封装

       原来没有使用Hiberante做持久层开发时，存在很多冗余，如：各种JDBC语句，connection的管理，所以出现了Hibernate把JDBC封装了一下，我们不用操作数据，直接操作它就行了。

 

二、我们再从分层的角度来看

       我们知道非常典型的三层架构：表示层，业务层，还有持久层。Hiberante也是持久层的框架，而且持久层的框架还有很多，比如：IBatis，Nhibernate，JDO，OJB，EJB等等。

 

三、Hibernate是开源的一个ORM（对象关系映射）框架。

      ORM，即Object-Relational Mapping，它的作用就是在关系型数据库和对象之间做了一个映射。从对象（Object）映射到关系（Relation），再从关系映射到对象。这样，我们在操作数据库的时候，不需要再去和复杂SQL打交道，只要像操作对象一样操作它就可以了（把关系数据库的字段在内存中映射成对象的属性）。

 

Hibernate的核心：

 

 

从上图中，我们可以看出Hibernate六大核心接口，两个主要配置文件，以及他们直接的关系。Hibernate的所有内容都在这了。那我们从上到下简单的认识一下，每个接口进行一句话总结。

1、Configuration接口:负责配置并启动Hibernate

2、SessionFactory接口:负责初始化Hibernate

3、Session接口:负责持久化对象的CRUD操作

4、Transaction接口:负责事务

5、Query接口和Criteria接口:负责执行各种数据库查询

注意：Configuration实例是一个启动期间的对象，一旦SessionFactory创建完成它就被丢弃了。

Hibernate的优/缺点：
优点：

1、更加对象化

以对象化的思维操作数据库，我们只需要操作对象就可以了，开发更加对象化。

2、移植性

因为Hibernate做了持久层的封装，你就不知道数据库，你写的所有的代码都具有可复用性。

3、Hibernate是一个没有侵入性的框架，没有侵入性的框架我们称为轻量级框架。

对比Struts的Action和ActionForm，都需要继承，离不开Struts。Hibernate不需要继承任何类，不需要实现任何接口。这样的对象叫POJO对象。

4、Hibernate代码测试方便。

5、提高效率，提高生产力。

 

缺点：

1、使用数据库特性的语句，将很难调优

2、对大批量数据更新存在问题

3、系统中存在大量的攻击查询功能 




Hibernate与Mybatis对比
1. 简介
Hibernate：Hibernate是当前最流行的ORM框架之一，对JDBC提供了较为完整的封装。Hibernate的O/R Mapping实现了POJO 和数据库表之间的映射，以及SQL的自动生成和执行。

Mybatis：Mybatis同样也是非常流行的ORM框架，主要着力点在于 POJO 与 SQL 之间的映射关系。然后通过映射配置文件，将SQL所需的参数，以及返回的结果字段映射到指定 POJO 。相对Hibernate“O/R”而言，Mybatis 是一种“Sql Mapping”的ORM实现。

2. 开发速度
难易度

Hibernate的真正掌握要比Mybatis困难，Hibernate比mybatis更加重量级一些。

Mybatis框架相对简单很容易上手，但也相对简陋些。

开发工作量

Mybatis需要我们手动编写SQL语句，回归最原始的方式，所以可以按需求指定查询的字段，提高程序的查询效率。

Hibernate也可以自己写SQL语句来指定需要查询的字段，但这样破坏了Hibernate封装以及简洁性。

3. 数据库移植性
Mybatis由于所有SQL都是依赖数据库书写的，所以扩展性，迁移性比较差。

Hibernate与数据库具体的关联都在XML中，所以HQL对具体是用什么数据库并不是很关心。

4. 缓存机制对比
相同点

Hibernate和Mybatis的二级缓存除了采用系统默认的缓存机制外，都可以通过实现你自己的缓存或为其他第三方缓存方案，创建适配器来完全覆盖缓存行为。

不同点

Hibernate的二级缓存配置在SessionFactory生成的配置文件中进行详细配置，然后再在具体的表-对象映射中配置是那种缓存。

MyBatis的二级缓存配置都是在每个具体的表-对象映射中进行详细配置，这样针对不同的表可以自定义不同的缓存机制。并且Mybatis可以在命名空间中共享相同的缓存配置和实例，通过Cache-ref来实现。

两者比较

因为Hibernate对查询对象有着良好的管理机制，用户无需关心SQL。所以在使用二级缓存时如果出现脏数据，系统会报出错误并提示。而MyBatis在这一方面，使用二级缓存时需要特别小心。如果不能完全确定数据更新操作的波及范围，避免Cache的盲目使用。否则，脏数据的出现会给系统的正常运行带来很大的隐患。

5. 两者对比总结
两者相同点
Hibernate与MyBatis都可以是通过SessionFactoryBuider由XML配置文件生成SessionFactory，然后由SessionFactory 生成Session，最后由Session来开启执行事务和SQL语句。其中SessionFactoryBuider，SessionFactory，Session的生命周期都是差不多的。如下图所示：

这里写图片描述

Hibernate和MyBatis都支持JDBC和JTA事务处理。
Hibernate优势
Hibernate的DAO层开发比MyBatis简单，Mybatis需要维护SQL和结果映射。

Hibernate对对象的维护和缓存要比MyBatis好，对增删改查的对象的维护要方便。

Hibernate数据库移植性很好，MyBatis的数据库移植性不好，不同的数据库需要写不同SQL。

Hibernate有更好的二级缓存机制，可以使用第三方缓存。MyBatis本身提供的缓存机制不佳。

Mybatis优势
MyBatis可以进行更为细致的SQL优化，可以减少查询字段。

MyBatis容易掌握，而Hibernate门槛较高。

一句话总结
在博文的结尾，我们将Mybatis和Hibernate之间的区别自个用六个词做总结：

Mybatis：小巧、方便、高效、简单、直接、半自动化

Hibernate：强大、方便、高效、复杂、间接、全自动化





Hibernate有很多值得学习的地方，这里我们主要介绍Hibernate，包括介绍Hibernate PO和Hibernate VO方面。 

PO（Persistence Object ）和VO（Value Object  ）是Hibernate中两个比较关键的概念。 
首先，何谓VO，很简单，VO就是一个简单的值对象。 

总结: 

VO经过Hibernate进行处理，就变成了PO。 
session.save(user)中，我们把一个VO “user”传递给Hibernate的Session.save方法进行保存。在save方法中，Hibernate对其进行如下处理： 

1．在当前session所对应的实体容器（Entity Map）中查询是否存在user对象的引用。 

2．如果引用存在，则直接返回user对象id，save过程结束. Hibernate中，针对每个Session有一个实体容器（实际上是一个Map对象）， 如果此容器中已经保存了目标对象的引用，那么hibernate会认为此对象已经 与Session相关联。 
对于save操作而言，如果对象已经与Session相关联（即已经被加入Session 的实体容器中），则无需进行具体的操作。因为之后的Session.flush过程中，Hibernate会对此实体容器中的对象进行遍历，查找出发生变化的实体，生成 
并执行相应的update语句。 

3．如果引用不存在，则根据映射关系，执行insert操作。 

a) 在我们这里的示例中，采用了native的id生成机制，因此hibernate会 
从数据库取得insert操作生成的id并赋予user对象的id属性。 
b) 将user对象的引用纳入Hibernate的实体容器。 
c) save过程结束，返回对象id. 
而Session.load方法中，再返回对象之前，Hibernate就已经将此对象纳入其实 
体容器中。 

Hibernate VO和Hibernate PO的主要区别在于： 

◆VO是独立的Java Object。 
◆PO是由Hibernate纳入其实体容器（Entity Map）的对象，它代表了与数据库中某条记录对应的Hibernate实体，PO的变化在事务提交时将反应到实际数据库中。如果一个PO与Session对应的实体容器中分离（如Session关闭后的PO），那么此时，它又会变成一个VO。由Hibernate VO和Hibernate PO的概念，又引申出一些系统层次设计方面的问题。如在传统的MVC架构中，位于Model层的PO，是否允许被传递到其他层面。由于PO的更新最终将被映射到实际数据库中，如果PO在其他层面（如View层）发生了变动，那么可能会对Model 层造成意想不到的破坏。 

因此，一般而言，应该避免直接PO传递到系统中的其他层面，一种解决办法是，通过一个VO，通过属性复制使其具备与PO相同属性值，并以其为传输媒质（实际上，这个VO被用作Data Transfer Object，即所谓的DTO），将此VO传递给其他层面以实现必须的数据传送。


存储过程[1]（Stored Procedure），计算机用语，是一组为了完成特定功能的SQL语句集，是利用SQL Server所提供的Transact-SQL语言所编写的程序。经编译后存储在数据库中。存储过程是数据库中的一个重要对象，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是由流控制和SQL语句书写的过程，这个过程经编译和优化后存储在数据库服务器中，存储过程可由应用程序通过一个调用来执行，而且允许用户声明变量 。同时，存储过程可以接收和输出参数、返回执行存储过程的状态值，也可以嵌套调用。

功能

这类语言主要提供以下功能，让用户可以设计出符合引用需求的程序：

1)、变量说明

2)、ANSI（美国国家标准化组织）兼容的SQL命令(如Select,Update….)

3)、一般流程控制命令(if…else…、while….)

4)、内部函数

sql语句集，经编译后存储在数据库中。用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程。
系统存储过程
以sp_开头,用来进行系统的各项设定.取得信息.相关管理工作。

本地存储过程
用户创建的存储过程是由用户创建并完成某一特定功能的存储过程，事实上一般所说的存储过程就是指本地存储过程。

临时存储过程
分为两种存储过程：

一是本地临时存储过程，以井字号(#)作为其名称的第一个字符，则该存储过程将成为一个存放在tempdb数据库中的本地临时存储过程，且只有创建它的用户才能执行它;

二是全局临时存储过程，以两个井字号(##)号开始，则该存储过程将成为一个存储在tempdb数据库中的全局临时存储过程，全局临时存储过程一旦创建，以后连接到服务器的任意用户都可以执行它，而且不需要特定的权限。

远程存储过程
在SQL Server2005中，远程存储过程(Remote Stored Procedures)是位于远程服务器上的存储过程，通常可以使用分布式查询和EXECUTE命令执行一个远程存储过程。

扩展存储过程
扩展存储过程(Extended Stored Procedures)是用户可以使用外部程序语言编写的存储过程，而且扩展存储过程的名称通常以xp_开头。

WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信――允许服务器主动发送信息给客户端。



数据即资产
区块链作为一种价值网络，链上的数据都将因为需求的存在，而被定义为资产，即需求即价值。

行为即挖矿
每个人的行为，都将被切碎为一个个挖矿的动作，给社区贡献能量。人的行为本身就是能量的一种释放，就像呼吸，本质上是氧气和二氧化碳的能量转换，类似的社会行为都可能因为区块链和硬件的结合，而成为可测量的能量转化过程，源源不断的给社区生态提供能源，一如当下的挖矿行为就是在帮助区块链记账，支撑起了区块链生态的繁衍。

代币即奖励
在区块链世界里，但凡你的资产或行为有创造或流通，它都将以cryptocurrency的形式奖励到你的数字钱包里，这种奖励机制的碎片化和无缝细化，给了价值社会以最充分的想象，这才是区块链高潮迭起的根本原因。

通证即信用
一个token代表了一个信用值，它是有价格的信用凭证，自由流通。token作为一个技术名词，的确迷惑了太多局外人，再加上技术传播者在遣词造句上的黔驴技穷，使得一个简单的词汇把本就复杂的区块链世界缠绕的更加迷惘。token是一种权益证明，上面写明了主体的责权及其资产归属，比如你的身份证、景区门票、发票、股权等，都是一种你在某个垂直场景中的信用记录。

代码即合约
在区块链上，代码取代文本，成为合约的新呈现形式，甚至还自动执行，这是区块链码农的一次卓越贡献。而随着代码即合约的“肆虐”，结合未来的人工智能，或许未来区块链世界的主导者可能会变为智人，而代码将成为“遥控”社区的准绳。

节点即渠道
未来，每个硬件都将因为芯片和算法的双植入，而成为数据的采集点和流通点，即渠道充分碎片化。

社区即组织
区块链也在重新定义组织边界，你在什么社区，将决定你的组织身份。

共识即法律
规范社区成员行为的是大家妥协而成的共识，认可即生效，反对即出局，拥护即奖励，违反即惩罚。



区块链主要解决的交易的信任和安全问题，因此它针对这个问题提出了四个技术创新：

第一个叫分布式账本，就是交易记账由分布在不同地方的多个节点共同完成，而且每一个节点都记录的是完整的账目，因此它们都可以参与监督交易合法性，同时也可以共同为其作证。不同于传统的中心化记账方案，没有任何一个节点可以单独记录账目，从而避免了单一记账人被控制或者被贿赂而记假账的可能性。另一方面，由于记账节点足够多，理论上讲除非所有的节点被破坏，否则账目就不会丢失，从而保证了账目数据的安全性。

第二个叫做对称加密和授权技术，存储在区块链上的交易信息是公开的，但是账户身份信息是高度加密的，只有在数据拥有者授权的情况下才能访问到，从而保证了数据的安全和个人的隐私。

第三个叫做共识机制，就是所有记账节点之间怎么达成共识，去认定一个记录的有效性，这既是认定的手段，也是防止篡改的手段。区块链提出了四种不同的共识机制，适用于不同的应用场景，在效率和安全性之间取得平衡。以比特币为例，采用的是工作量证明，只有在控制了全网超过51%的记账节点的情况下，才有可能伪造出一条不存在的记录。当加入区块链的节点足够多的时候，这基本上不可能，从而杜绝了造假的可能。

最后一个技术特点叫智能合约，智能合约是基于这些可信的不可篡改的数据，可以自动化的执行一些预先定义好的规则和条款。以保险为例，如果说每个人的信息（包括医疗信息和风险发生的信息）都是真实可信的，那就很容易的在一些标准化的保险产品中，去进行自动化的理赔。